// Code generated by protoc-gen-go. DO NOT EDIT.
// source: todo/todo.proto

package todo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResultReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultReply) Reset()         { *m = ResultReply{} }
func (m *ResultReply) String() string { return proto.CompactTextString(m) }
func (*ResultReply) ProtoMessage()    {}
func (*ResultReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7148f81fa63801, []int{0}
}

func (m *ResultReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultReply.Unmarshal(m, b)
}
func (m *ResultReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultReply.Marshal(b, m, deterministic)
}
func (m *ResultReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultReply.Merge(m, src)
}
func (m *ResultReply) XXX_Size() int {
	return xxx_messageInfo_ResultReply.Size(m)
}
func (m *ResultReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResultReply proto.InternalMessageInfo

func (m *ResultReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchRequest struct {
	//  int32 id = 1;
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7148f81fa63801, []int{1}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SearchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TodoRequest struct {
	//  int32 id = 1;
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	TodoId               string   `protobuf:"bytes,4,opt,name=todoId,proto3" json:"todoId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TodoRequest) Reset()         { *m = TodoRequest{} }
func (m *TodoRequest) String() string { return proto.CompactTextString(m) }
func (*TodoRequest) ProtoMessage()    {}
func (*TodoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7148f81fa63801, []int{2}
}

func (m *TodoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoRequest.Unmarshal(m, b)
}
func (m *TodoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoRequest.Marshal(b, m, deterministic)
}
func (m *TodoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoRequest.Merge(m, src)
}
func (m *TodoRequest) XXX_Size() int {
	return xxx_messageInfo_TodoRequest.Size(m)
}
func (m *TodoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TodoRequest proto.InternalMessageInfo

func (m *TodoRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TodoRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TodoRequest) GetTodoId() string {
	if m != nil {
		return m.TodoId
	}
	return ""
}

type DeleteRequest struct {
	//  int32 id = 1;
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7148f81fa63801, []int{3}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TodoReply struct {
	//  int32 id = 1;
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TodoReply) Reset()         { *m = TodoReply{} }
func (m *TodoReply) String() string { return proto.CompactTextString(m) }
func (*TodoReply) ProtoMessage()    {}
func (*TodoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7148f81fa63801, []int{4}
}

func (m *TodoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoReply.Unmarshal(m, b)
}
func (m *TodoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoReply.Marshal(b, m, deterministic)
}
func (m *TodoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoReply.Merge(m, src)
}
func (m *TodoReply) XXX_Size() int {
	return xxx_messageInfo_TodoReply.Size(m)
}
func (m *TodoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoReply.DiscardUnknown(m)
}

var xxx_messageInfo_TodoReply proto.InternalMessageInfo

func (m *TodoReply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TodoReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TodoReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UserRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7148f81fa63801, []int{5}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserReply struct {
	//  int32 id = 1;
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserReply) Reset()         { *m = UserReply{} }
func (m *UserReply) String() string { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()    {}
func (*UserReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7148f81fa63801, []int{6}
}

func (m *UserReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReply.Unmarshal(m, b)
}
func (m *UserReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReply.Marshal(b, m, deterministic)
}
func (m *UserReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReply.Merge(m, src)
}
func (m *UserReply) XXX_Size() int {
	return xxx_messageInfo_UserReply.Size(m)
}
func (m *UserReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserReply proto.InternalMessageInfo

func (m *UserReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*ResultReply)(nil), "todo.ResultReply")
	proto.RegisterType((*SearchRequest)(nil), "todo.SearchRequest")
	proto.RegisterType((*TodoRequest)(nil), "todo.TodoRequest")
	proto.RegisterType((*DeleteRequest)(nil), "todo.DeleteRequest")
	proto.RegisterType((*TodoReply)(nil), "todo.TodoReply")
	proto.RegisterType((*UserRequest)(nil), "todo.UserRequest")
	proto.RegisterType((*UserReply)(nil), "todo.UserReply")
}

func init() { proto.RegisterFile("todo/todo.proto", fileDescriptor_7b7148f81fa63801) }

var fileDescriptor_7b7148f81fa63801 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0xa5, 0xa5, 0x1f, 0x7c, 0x1d, 0x54, 0xe2, 0x6a, 0x4c, 0xc3, 0xc9, 0xec, 0x05, 0x4e, 0xa8,
	0x18, 0x30, 0x1e, 0x4d, 0xbc, 0x98, 0x90, 0x98, 0x54, 0x39, 0x79, 0xaa, 0x74, 0x52, 0x1b, 0x4b,
	0x17, 0xbb, 0x8b, 0xc6, 0xff, 0xed, 0x0f, 0x30, 0xbb, 0xed, 0x2e, 0x5b, 0x03, 0x09, 0x5c, 0x08,
	0x6f, 0xd8, 0x37, 0xf3, 0xde, 0xbc, 0x01, 0xba, 0x82, 0xc5, 0xec, 0x42, 0x7e, 0x0c, 0x97, 0x05,
	0x13, 0x8c, 0x78, 0xf2, 0x3b, 0xed, 0x43, 0x27, 0x44, 0xbe, 0xca, 0x44, 0x88, 0xcb, 0xec, 0x9b,
	0x04, 0xd0, 0x5e, 0x20, 0xe7, 0x51, 0x82, 0x81, 0x73, 0xee, 0x0c, 0xfc, 0x50, 0x43, 0x3a, 0x86,
	0xc3, 0x27, 0x8c, 0x8a, 0xf9, 0x5b, 0x88, 0x1f, 0x2b, 0xe4, 0x82, 0x9c, 0xc2, 0x3f, 0xc1, 0xde,
	0x31, 0x0f, 0x5c, 0xf5, 0xb0, 0x04, 0xe4, 0x08, 0xdc, 0x34, 0x0e, 0x9a, 0xaa, 0xe4, 0xa6, 0x31,
	0x9d, 0x41, 0xe7, 0x99, 0xc5, 0x4c, 0x93, 0x02, 0x68, 0xcf, 0x59, 0x2e, 0x30, 0x17, 0x15, 0x4d,
	0xc3, 0x75, 0xbb, 0xa6, 0xdd, 0xee, 0x0c, 0x5a, 0x52, 0xe6, 0x43, 0x1c, 0x78, 0xaa, 0x5c, 0x21,
	0xa9, 0xe6, 0x1e, 0x33, 0x14, 0xb8, 0x9f, 0x9a, 0x47, 0xf0, 0x4b, 0x35, 0x95, 0xd7, 0x2d, 0x5a,
	0xfe, 0xd0, 0xec, 0xad, 0x78, 0xf5, 0xad, 0xbc, 0x40, 0x67, 0xc6, 0xb1, 0xd0, 0x2a, 0x7a, 0xf0,
	0x7f, 0xc5, 0xb1, 0xc8, 0xa3, 0x85, 0xde, 0x9f, 0xc1, 0xf2, 0xb7, 0x65, 0xc4, 0xf9, 0x17, 0x2b,
	0xe2, 0x6a, 0x9e, 0xc1, 0x52, 0x3d, 0x2e, 0xa2, 0x34, 0xd3, 0xe6, 0x15, 0xa0, 0x7d, 0xf0, 0xcb,
	0xe6, 0x52, 0xad, 0xdd, 0xda, 0xad, 0xb7, 0x1e, 0xfd, 0x34, 0xc1, 0x93, 0xbe, 0xc8, 0x04, 0x0e,
	0x42, 0x14, 0x45, 0x8a, 0x9f, 0xa8, 0xf0, 0xc9, 0x50, 0x05, 0x5e, 0x0b, 0xae, 0xd7, 0x2d, 0x8b,
	0x66, 0x11, 0xb4, 0x41, 0xc6, 0xe0, 0x4f, 0x53, 0x2e, 0x64, 0x89, 0xef, 0x4a, 0xba, 0x74, 0xc8,
	0x08, 0x20, 0xc4, 0xa4, 0x22, 0x92, 0x63, 0xfb, 0xc9, 0xd6, 0x51, 0x37, 0xf2, 0xe0, 0x12, 0x33,
	0x6c, 0x03, 0xa9, 0x2a, 0x59, 0x67, 0x49, 0x1b, 0x03, 0x87, 0x4c, 0x00, 0xca, 0xc8, 0x6d, 0x67,
	0xb5, 0x23, 0xd8, 0xc8, 0x24, 0xb7, 0xfa, 0x54, 0x24, 0xef, 0x2e, 0xcb, 0xf6, 0xa0, 0x1a, 0x7f,
	0x32, 0x06, 0x2d, 0xd5, 0xca, 0x5b, 0xfb, 0x33, 0x29, 0xd1, 0xc6, 0x5a, 0xa6, 0xe2, 0xec, 0x3e,
	0xeb, 0x0a, 0xfc, 0x29, 0x4b, 0xd2, 0x7c, 0xf7, 0x51, 0xaf, 0x2d, 0xf5, 0x47, 0xbe, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x58, 0x2d, 0x65, 0x20, 0xdb, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TodoClient is the client API for Todo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TodoClient interface {
	// TODOの検索
	RetrieveTodo(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TodoReply, error)
	// TODOの一覧
	ListTodos(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Todo_ListTodosClient, error)
	// TODOの登録
	RegistTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error)
	// TODOの複数登録
	RegistTodos(ctx context.Context, opts ...grpc.CallOption) (Todo_RegistTodosClient, error)
	// TODOの削除
	DeleteTodo(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error)
	// リクエストユーザーのTODOの全件削除
	DeleteTodoAll(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error)
	// ユーザーの登録
	RegistUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
	// ユーザーの削除
	DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error)
	// ユーザーのログイン
	LoginUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
}

type todoClient struct {
	cc *grpc.ClientConn
}

func NewTodoClient(cc *grpc.ClientConn) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) RetrieveTodo(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TodoReply, error) {
	out := new(TodoReply)
	err := c.cc.Invoke(ctx, "/todo.Todo/RetrieveTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) ListTodos(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Todo_ListTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Todo_serviceDesc.Streams[0], "/todo.Todo/ListTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoListTodosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Todo_ListTodosClient interface {
	Recv() (*TodoReply, error)
	grpc.ClientStream
}

type todoListTodosClient struct {
	grpc.ClientStream
}

func (x *todoListTodosClient) Recv() (*TodoReply, error) {
	m := new(TodoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoClient) RegistTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error) {
	out := new(TodoReply)
	err := c.cc.Invoke(ctx, "/todo.Todo/RegistTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) RegistTodos(ctx context.Context, opts ...grpc.CallOption) (Todo_RegistTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Todo_serviceDesc.Streams[1], "/todo.Todo/RegistTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoRegistTodosClient{stream}
	return x, nil
}

type Todo_RegistTodosClient interface {
	Send(*TodoRequest) error
	CloseAndRecv() (*ResultReply, error)
	grpc.ClientStream
}

type todoRegistTodosClient struct {
	grpc.ClientStream
}

func (x *todoRegistTodosClient) Send(m *TodoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoRegistTodosClient) CloseAndRecv() (*ResultReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResultReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoClient) DeleteTodo(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/todo.Todo/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) DeleteTodoAll(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/todo.Todo/DeleteTodoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) RegistUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/todo.Todo/RegistUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/todo.Todo/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) LoginUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/todo.Todo/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServer is the server API for Todo service.
type TodoServer interface {
	// TODOの検索
	RetrieveTodo(context.Context, *SearchRequest) (*TodoReply, error)
	// TODOの一覧
	ListTodos(*SearchRequest, Todo_ListTodosServer) error
	// TODOの登録
	RegistTodo(context.Context, *TodoRequest) (*TodoReply, error)
	// TODOの複数登録
	RegistTodos(Todo_RegistTodosServer) error
	// TODOの削除
	DeleteTodo(context.Context, *DeleteRequest) (*ResultReply, error)
	// リクエストユーザーのTODOの全件削除
	DeleteTodoAll(context.Context, *DeleteRequest) (*ResultReply, error)
	// ユーザーの登録
	RegistUser(context.Context, *UserRequest) (*UserReply, error)
	// ユーザーの削除
	DeleteUser(context.Context, *DeleteRequest) (*ResultReply, error)
	// ユーザーのログイン
	LoginUser(context.Context, *UserRequest) (*UserReply, error)
}

// UnimplementedTodoServer can be embedded to have forward compatible implementations.
type UnimplementedTodoServer struct {
}

func (*UnimplementedTodoServer) RetrieveTodo(ctx context.Context, req *SearchRequest) (*TodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTodo not implemented")
}
func (*UnimplementedTodoServer) ListTodos(req *SearchRequest, srv Todo_ListTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
}
func (*UnimplementedTodoServer) RegistTodo(ctx context.Context, req *TodoRequest) (*TodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistTodo not implemented")
}
func (*UnimplementedTodoServer) RegistTodos(srv Todo_RegistTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method RegistTodos not implemented")
}
func (*UnimplementedTodoServer) DeleteTodo(ctx context.Context, req *DeleteRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (*UnimplementedTodoServer) DeleteTodoAll(ctx context.Context, req *DeleteRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoAll not implemented")
}
func (*UnimplementedTodoServer) RegistUser(ctx context.Context, req *UserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistUser not implemented")
}
func (*UnimplementedTodoServer) DeleteUser(ctx context.Context, req *DeleteRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedTodoServer) LoginUser(ctx context.Context, req *UserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}

func RegisterTodoServer(s *grpc.Server, srv TodoServer) {
	s.RegisterService(&_Todo_serviceDesc, srv)
}

func _Todo_RetrieveTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).RetrieveTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/RetrieveTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).RetrieveTodo(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_ListTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServer).ListTodos(m, &todoListTodosServer{stream})
}

type Todo_ListTodosServer interface {
	Send(*TodoReply) error
	grpc.ServerStream
}

type todoListTodosServer struct {
	grpc.ServerStream
}

func (x *todoListTodosServer) Send(m *TodoReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Todo_RegistTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).RegistTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/RegistTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).RegistTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_RegistTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServer).RegistTodos(&todoRegistTodosServer{stream})
}

type Todo_RegistTodosServer interface {
	SendAndClose(*ResultReply) error
	Recv() (*TodoRequest, error)
	grpc.ServerStream
}

type todoRegistTodosServer struct {
	grpc.ServerStream
}

func (x *todoRegistTodosServer) SendAndClose(m *ResultReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoRegistTodosServer) Recv() (*TodoRequest, error) {
	m := new(TodoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Todo_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).DeleteTodo(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_DeleteTodoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).DeleteTodoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/DeleteTodoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).DeleteTodoAll(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_RegistUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).RegistUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/RegistUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).RegistUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).DeleteUser(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).LoginUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Todo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "todo.Todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveTodo",
			Handler:    _Todo_RetrieveTodo_Handler,
		},
		{
			MethodName: "RegistTodo",
			Handler:    _Todo_RegistTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _Todo_DeleteTodo_Handler,
		},
		{
			MethodName: "DeleteTodoAll",
			Handler:    _Todo_DeleteTodoAll_Handler,
		},
		{
			MethodName: "RegistUser",
			Handler:    _Todo_RegistUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Todo_DeleteUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Todo_LoginUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTodos",
			Handler:       _Todo_ListTodos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegistTodos",
			Handler:       _Todo_RegistTodos_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "todo/todo.proto",
}
